{
  "hash": "7897bd57fee21a4f24614c802ca24689",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: APIs f√ºr Datenerhebung und Inhaltsanalyse\nsubtitle: \"Vorlesung: Methoden der empirischen Kommunikations- und Medienforschung I / Datenerhebung, Wintersemester 2024/2025\"\nlang: \"de\"\ndate: today\ndate-format: \"DD. MM. YYYY\"\nauthor: Marko Bachl\ninstitute: Freie Universit√§t Berlin\nformat:\n  revealjs:\n      embed-resources: false\n      height: 900\n      width: 1600\n      theme: theme.scss\n      highlight-style: github-dark\n      slide-number: c\n      code-line-numbers: false\n      history: false\n      smaller: false\n      title-slide-attributes:\n        data-background-image: https://bachl.quarto.pub/do-women-write-more-about-women/fu-logo-240903-RGB-s.svg\n        data-background-position: \"top right\"\n        data-background-size: auto 200px\ncss: colors.css\nbibliography: references.bib\ncsl: https://www.zotero.org/styles/apa\ncallout-appearance: simple\nexecute: \n  eval: true\n  echo: true\n---\n\n\n\n# Hallo\n\n## Arbeitsstelle Digitale Forschungsmethoden\n\n![dall-e-3, Prompt: A team of communication researchers using digital research methods and computational methods, cyberpunk style](images/as_digimeth.png)\n\n## Dieses Bild habe ich mit einer API erstellt\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\nlibrary(jsonlite)\n\nkey = readLines(\"openai_key.txt\")\n\nreq = request(\"https://api.openai.com/v1/images/generations\") |>\n  req_headers(\n    \"Content-Type\" = \"application/json\",\n    \"Authorization\" = paste0(\"Bearer \", key)\n  ) |>\n  req_body_json(list(\n    model = \"dall-e-3\",\n    prompt = \"A team of communication researchers using digital research methods and computational methods, cyberpunk style\",\n    n = 1,\n    size = \"1024x1024\"\n  )) |>\n  req_perform()\n\nimage_url = resp_body_json(req)$data[[1]]$url\ndownload.file(url = image_url, destfile = \"as_digimeth.png\")\n```\n:::\n\n\n\nNachmachen: üëâ `bsp_dall-e.R` (mit OpenAI-Account, $0.04/Bild)\n\n## Arbeitsstelle Digitale Forschungsmethoden\n\n![Real life](https://www.polsoz.fu-berlin.de/kommwiss/arbeitsstellen/digitale-methoden/C36EC0EA-05C8-49F8-B9D1-9A91E577CE26-Kopie.jpg)\n\n\n## Pr√§sentation und Code\n\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n[![](methoden1_ma_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='left' width=60%}](https://bachl.github.io/methodenvl_ma/)\n:::\n:::\n\n\n\nMaterial: [Pr√§sentation HTML](https://bachl.github.io/methodenvl_ma/), [Pr√§sentation PDF](https://github.com/bachl/methodenvl_ma/blob/main/methoden1_ma.pdf), [Code](https://github.com/bachl/methodenvl_ma)\n\n## Agenda\n\n1.  Was ist eine API?\n\n2.  Verbreiteter Einsatz in PuK: Erhebung digitaler Inhalte\n\n    a)  Vor und nach der *APIcalypse*\n    \n    a)  Umsetzung mit `R` und `{httr2}`\n\n3.  Neuerer Einsatz in PuK: Nutzung von Cloud-Diensten (z.B. KI)\n\n    a)  Zero-shot classification: Kurze Einf√ºhrung\n\n    b)  Zero-shot classification: Umsetzung mit der OpenAI-API\n\n# Was ist eine API?\n\n## Was ist eine API?\n\n-   **A**pplication **P**rogramming **I**nterface = Programmierschnittstelle\n    -   Austausch maschinenlesbarer Daten zwischen verschiedenen Programmen/Computern\n    \n. . . \n\n-   **Web-APIs** nutzen die gleichen Protokolle wie Browser, aber liefern anderen Datenstrukturen\n    -   Formate sind standardisiert (z.B. XML oder JSON), Inhalte variieren\n    -   oft nutzen Plattformen f√ºr ihre eigenen (Mobil-) Apps ebenfalls APIs\n\n## Ein einfaches Beispiel\n\n![[Breaking Bad Quotes API](https://breakingbadquotes.xyz/)](images/clipboard-1478015886.png)\n\n## Ein einfaches Beispiel\n\n### Anfrage\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2); library(jsonlite)\nbb_quote = request(base_url = \"https://api.breakingbadquotes.xyz/v1/quotes\") |> req_perform()\n```\n:::\n\n\n\n::: {.fragment}\n### Antwort\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbb_quote |> resp_body_string() |> prettify()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[\n    {\n        \"quote\": \"We're done when I say we're done.\",\n        \"author\": \"Walter White\"\n    }\n]\n \n```\n\n\n:::\n:::\n\n\n:::\n\n## Grundbegriffe\n\n::: {.incremental}\n- Server-Client-Prinzip: Server definiert Schnittstelle, Client kann diese abfragen\n\n- REST API: **Re**presentational **s**tate **t**ransfer, Wortneusch√∂pfung; beschreibt abstrakt den Aufbau eines Datennetzwerks (z.B. des WWW); *stateless*, d.h., es passiert nur bei einer Anfrage etwas.\n\n- Streaming API: Verbindung bleibt √ºber einen Zeitraum bestehen, wenn auf dem Server etwas passiert, wird es an Client gesendet.\n\n- Endpoint: URL, mit der ein API-Aufruf beginnt; Die meisten APIs haben mehrere Endpoints, in die sie verschiedene Inhalte und Dienste sortieren.\n\n- Parameter: M√∂glichkeit, weiter zu spezifizieren, was der API-Endpoint liefern soll.\n\n<!-- - JSON: **J**avaScript **O**bject **N**otation; Dateiformat f√ºr hierarchisch angeordnete, nicht (zwingend) rechteckige Daten. -->\n:::\n\n## Nachlesen\n\n![[@haim_computational_2023, Kapitel 5.3]](https://media.springernature.com/full/springer-static/cover-hires/book/978-3-658-40171-9?as=webp)\n\n# Verbreiteter Einsatz in PuK: Erhebung digitaler Inhalte\n\n# Vor der *APIcalypse*: Kommunikationsspuren auf Social Media\n\n## (Alternative) media sources in AfD-centered Facebook discussions\n\n> The study is based on all posts, comments,\nand replies on core AfD Facebook\npages during the year 2016, as\nthey could be retrieved during the last\nweek of the year. The Facebook Graph\nAPI (https://developers.facebook.com/docs/graphapi)\nwas used for the main data collection.\n\n:::{.aside}\n[@bachl_alternative_2018]\n:::\n\n## (Alternative) media sources in AfD-centered Facebook discussions\n\n> the sample\nconsisted of 122 pages, mostly of\nregional and local sections of the party,\nof its youth organization Junge Alternative,\nand of AfD politicians. All\nposts on these pages (n = 170,033), all\ncomments to the posts (n = 1,455,200),\nand all replies to the comments (n =\n960,077) were retrieved (overall n =\n2,585,310).\n\n:::{.aside}\n[@bachl_alternative_2018]\n:::\n\n##\n\n![[@bachl_alternative_2018]](images/bachl2018.png)\n\n\n## Post-API-age & APIcalypse\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n![[@freelon_computational_2018]](images/freelon.png)\n:::\n\n::: {.column width=\"50%\"}\n![[@bruns_after_2019]](images/bruns.png)\n:::\n\n::::\n\n## Post-API-age & APIcalypse\n\n- APIs der meisten gro√üen Social-Media-Plattformen mehr oder weniger geschlossen oder f√ºr Grundlagenforschung unbezahlbar.\n\n    - Keine (praktikablen) Zug√§nge zu Facebook, Instagram, Twitter\n\n    - Eingeschr√§nkter Zugang zu TikTok, Reddit, YouTube (aber kaum zu SN-Features)\n\n    - Zugang zu kleineren Plattformen, z.B. BlueSky, Mastodon, Telegram\n\n- Problem: Willk√ºr der Anbieter\n\n- Hoffnung: EU Digital Services Act (DSA)\n\n## APIs are alive and well\n\n- Trotzdem: APIs bleiben wichtiges Werkzeug f√ºr digitale Forschungsmethoden, wenn auch (aktuell) weniger f√ºr Social-Media-Forschung\n\n- Datenzugang: [Bundestag](https://dip.bundestag.de/%C3%BCber-dip/hilfe/api), [MediaWiki Action API](https://www.mediawiki.org/wiki/API:Main_page) (u.a. Wikipedia), [Wikimedia REST API](https://wikimedia.org/api/rest_v1/#/), [YouTube](https://developers.google.com/youtube/v3?hl=de), [Telegram](https://core.telegram.org/#api-methods), [Tagesschau](https://tagesschau.api.bund.dev/), [The Guardian](https://open-platform.theguardian.com/), [DESTATIS](https://www.destatis.de/DE/Service/OpenData/genesis-api-webservice-oberflaeche.html), ...\n\n- Kommunikation mit Cloud-Diensten (2. Teil der Sitzung)\n\n# Umsetzung mit `R` und `{httr2}`\n\n## Umsetzung mit `R` und `{httr2}`\n\n- Beispiel: Aufmerksamkeit f√ºr Spitzenkandidat:innen in den letzten drei Wochen --- gemessen an den Aufrufen ihrer Wikipedia-Seiten\n\n. . . \n\n:::: {.columns}\n\n::: {.column width=\"70%\"}\n- Umsetzung mit [MediaWiki Action API](https://www.mediawiki.org/wiki/API:Main_page), Endpoint [PageViewInfo](https://www.mediawiki.org/wiki/Extension:PageViewInfo#API)\n\n- Nachmachen: üëâ `bsp_wikipedia.R`\n:::\n\n::: {.column width=\"30%\"}\n![<https://httr2.r-lib.org/>](https://httr2.r-lib.org/logo.png)\n:::\n\n::::\n\n\n## Genutzte Pakete\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2) # Kommunikation mit API √ºber HTTP\nlibrary(jsonlite) # JSON-Dateien\nlibrary(tidyverse) # Datenmanipulation und Grafik\n```\n:::\n\n\n\n\n## Anfrage an die API\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nreq = request(base_url = \"https://de.wikipedia.org/w/api.php\") |> \n  req_url_query(!!!list(\n    action = \"query\",\n    format = \"json\",\n    prop = \"pageviews\",\n    titles = c(\"Olaf_Scholz\", \"Robert_Habeck\",\n               \"Christian_Lindner\", \"Alice_Weidel\",\n               \"Sahra_Wagenknecht\", \"Friedrich_Merz\"),\n    pvipdays = 21),\n    .multi = \"pipe\")\nreq |> \n  req_dry_run()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGET /w/api.php?action=query&format=json&prop=pageviews&titles=Olaf_Scholz|Robert_Habeck|Christian_Lindner|Alice_Weidel|Sahra_Wagenknecht|Friedrich_Merz&pvipdays=21 HTTP/1.1\nHost: de.wikipedia.org\nUser-Agent: httr2/1.0.1 r-curl/5.2.1 libcurl/8.7.1\nAccept: */*\nAccept-Encoding: deflate, gzip\n```\n\n\n:::\n:::\n\n\n\n\n## Antwort der API\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nresp = req|> \n  req_perform()\n\nresp |> \n  resp_body_string() |> \n  prettify()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{\n    \"batchcomplete\": \"\",\n    \"query\": {\n        \"normalized\": [\n            {\n                \"from\": \"Olaf_Scholz\",\n                \"to\": \"Olaf Scholz\"\n            },\n            {\n                \"from\": \"Robert_Habeck\",\n                \"to\": \"Robert Habeck\"\n            },\n            {\n                \"from\": \"Christian_Lindner\",\n                \"to\": \"Christian Lindner\"\n            },\n            {\n                \"from\": \"Alice_Weidel\",\n                \"to\": \"Alice Weidel\"\n            },\n            {\n                \"from\": \"Sahra_Wagenknecht\",\n                \"to\": \"Sahra Wagenknecht\"\n            },\n            {\n                \"from\": \"Friedrich_Merz\",\n                \"to\": \"Friedrich Merz\"\n            }\n        ],\n        \"pages\": {\n            \"9716234\": {\n                \"pageid\": 9716234,\n                \"ns\": 0,\n                \"title\": \"Alice Weidel\",\n                \"pageviews\": {\n                    \"2024-12-30\": 17090,\n                    \"2024-12-31\": 13469,\n                    \"2025-01-01\": 13989,\n                    \"2025-01-02\": 13872,\n                    \"2025-01-03\": 17027,\n                    \"2025-01-04\": 14936,\n                    \"2025-01-05\": 16388,\n                    \"2025-01-06\": 16526,\n                    \"2025-01-07\": 16494,\n                    \"2025-01-08\": 18594,\n                    \"2025-01-09\": 42048,\n                    \"2025-01-10\": 60472,\n                    \"2025-01-11\": 87578,\n                    \"2025-01-12\": 110229,\n                    \"2025-01-13\": 73355,\n                    \"2025-01-14\": 47699,\n                    \"2025-01-15\": 36498,\n                    \"2025-01-16\": 39356,\n                    \"2025-01-17\": 41012,\n                    \"2025-01-18\": 36390,\n                    \"2025-01-19\": 36280\n                }\n            },\n            \"855225\": {\n                \"pageid\": 855225,\n                \"ns\": 0,\n                \"title\": \"Christian Lindner\",\n                \"pageviews\": {\n                    \"2024-12-30\": 1748,\n                    \"2024-12-31\": 1810,\n                    \"2025-01-01\": 1957,\n                    \"2025-01-02\": 1746,\n                    \"2025-01-03\": 1963,\n                    \"2025-01-04\": 3297,\n                    \"2025-01-05\": 3607,\n                    \"2025-01-06\": 7644,\n                    \"2025-01-07\": 3338,\n                    \"2025-01-08\": 3425,\n                    \"2025-01-09\": 5507,\n                    \"2025-01-10\": 3693,\n                    \"2025-01-11\": 2596,\n                    \"2025-01-12\": 2445,\n                    \"2025-01-13\": 2311,\n                    \"2025-01-14\": 2506,\n                    \"2025-01-15\": 2399,\n                    \"2025-01-16\": 3046,\n                    \"2025-01-17\": 2777,\n                    \"2025-01-18\": 2231,\n                    \"2025-01-19\": 2413\n                }\n            },\n            \"9708\": {\n                \"pageid\": 9708,\n                \"ns\": 0,\n                \"title\": \"Friedrich Merz\",\n                \"pageviews\": {\n                    \"2024-12-30\": 4268,\n                    \"2024-12-31\": 4062,\n                    \"2025-01-01\": 3726,\n                    \"2025-01-02\": 3612,\n                    \"2025-01-03\": 3615,\n                    \"2025-01-04\": 3699,\n                    \"2025-01-05\": 5205,\n                    \"2025-01-06\": 5573,\n                    \"2025-01-07\": 4537,\n                    \"2025-01-08\": 6975,\n                    \"2025-01-09\": 4976,\n                    \"2025-01-10\": 7641,\n                    \"2025-01-11\": 7375,\n                    \"2025-01-12\": 6926,\n                    \"2025-01-13\": 6752,\n                    \"2025-01-14\": 6001,\n                    \"2025-01-15\": 6593,\n                    \"2025-01-16\": 8711,\n                    \"2025-01-17\": 7709,\n                    \"2025-01-18\": 7008,\n                    \"2025-01-19\": 14239\n                }\n            },\n            \"293388\": {\n                \"pageid\": 293388,\n                \"ns\": 0,\n                \"title\": \"Olaf Scholz\",\n                \"pageviews\": {\n                    \"2024-12-30\": 2153,\n                    \"2024-12-31\": 4762,\n                    \"2025-01-01\": 2692,\n                    \"2025-01-02\": 2361,\n                    \"2025-01-03\": 3503,\n                    \"2025-01-04\": 3146,\n                    \"2025-01-05\": 3296,\n                    \"2025-01-06\": 3090,\n                    \"2025-01-07\": 2719,\n                    \"2025-01-08\": 2943,\n                    \"2025-01-09\": 2534,\n                    \"2025-01-10\": 3109,\n                    \"2025-01-11\": 4732,\n                    \"2025-01-12\": 3844,\n                    \"2025-01-13\": 3339,\n                    \"2025-01-14\": 3861,\n                    \"2025-01-15\": 3587,\n                    \"2025-01-16\": 3676,\n                    \"2025-01-17\": 3891,\n                    \"2025-01-18\": 3155,\n                    \"2025-01-19\": 3168\n                }\n            },\n            \"1569620\": {\n                \"pageid\": 1569620,\n                \"ns\": 0,\n                \"title\": \"Robert Habeck\",\n                \"pageviews\": {\n                    \"2024-12-30\": 3072,\n                    \"2024-12-31\": 4205,\n                    \"2025-01-01\": 3433,\n                    \"2025-01-02\": 3100,\n                    \"2025-01-03\": 4271,\n                    \"2025-01-04\": 4496,\n                    \"2025-01-05\": 4120,\n                    \"2025-01-06\": 5848,\n                    \"2025-01-07\": 6287,\n                    \"2025-01-08\": 5201,\n                    \"2025-01-09\": 4609,\n                    \"2025-01-10\": 5698,\n                    \"2025-01-11\": 5982,\n                    \"2025-01-12\": 8497,\n                    \"2025-01-13\": 9391,\n                    \"2025-01-14\": 11746,\n                    \"2025-01-15\": 13408,\n                    \"2025-01-16\": 23620,\n                    \"2025-01-17\": 13007,\n                    \"2025-01-18\": 9545,\n                    \"2025-01-19\": 11192\n                }\n            },\n            \"440646\": {\n                \"pageid\": 440646,\n                \"ns\": 0,\n                \"title\": \"Sahra Wagenknecht\",\n                \"pageviews\": {\n                    \"2024-12-30\": 2497,\n                    \"2024-12-31\": 3207,\n                    \"2025-01-01\": 2443,\n                    \"2025-01-02\": 2094,\n                    \"2025-01-03\": 2348,\n                    \"2025-01-04\": 2709,\n                    \"2025-01-05\": 2727,\n                    \"2025-01-06\": 2585,\n                    \"2025-01-07\": 2523,\n                    \"2025-01-08\": 3143,\n                    \"2025-01-09\": 3003,\n                    \"2025-01-10\": 3227,\n                    \"2025-01-11\": 4829,\n                    \"2025-01-12\": 32359,\n                    \"2025-01-13\": 11705,\n                    \"2025-01-14\": 5997,\n                    \"2025-01-15\": 5566,\n                    \"2025-01-16\": 4475,\n                    \"2025-01-17\": 4477,\n                    \"2025-01-18\": 6244,\n                    \"2025-01-19\": 5049\n                }\n            }\n        }\n    }\n}\n \n```\n\n\n:::\n:::\n\n\n\n## Antwort konvertieren und plotten\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nresp |> \n  resp_body_json() |>\n  _$query |> \n  _$pages |> \n  map_dfr(as_tibble) |> \n  mutate(date = as_date(names(pageviews))) |> \n  unnest(pageviews) |> \n  ggplot(aes(date, pageviews, color = title)) + \n  geom_line() + \n  scale_y_log10(labels = scales::label_comma()) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](methoden1_ma_files/figure-revealjs/unnamed-chunk-8-1.png){width=1600px}\n:::\n:::\n\n\n\n## Umsetzung mit `R` und `{httr2}`\n\n- Workflow: API finden, Dokumentation verstehen, Daten abfragen, aufbereiten, analysieren\n\n- Einschr√§nkung der MediaWiki Action API: Nur letzte 60 Tage\n\n- Alternative: Wikimedia REST API üëâ `bsp_wikipedia_rest.R`\n\n# Fragen?\n\n# Neuerer Einsatz in PuK: Nutzung von Cloud-Diensten (z.B. KI)\n\n## Nutzung von Cloud-Diensten\n\n- Viele Cloud-Dienste lassen sich √ºber APIs verwenden\n\n- Beispiele aus dem Bereich KI: [Huggingface Inference API](https://huggingface.co/docs/api-inference/index), [OpenAI API](https://platform.openai.com/docs/api-reference), [Perspective API](https://perspectiveapi.com/)\n\n- Workflow ist √§hnlich: Anfrage senden, Antwort erhalten\n\n- Unterschiede: Erfordert fast immer Authentifizierung, h√§ufig kostenpflichtig\n\n# Zero-shot classification: Kurze Einf√ºhrung\n\n## Bag-of-Words Machine Learning\n\n![Abbildungen von [Philipp K. Masur](https://philippmasur.de/); Zur Entwicklung von Computational Text Analysis: @bachl_computational_2024](images/masur_classic_ml.png)\n\n\n## Transfer Learning\n\n![Abbildungen von [Philipp K. Masur](https://philippmasur.de/); Zur Entwicklung von Computational Text Analysis: @bachl_computational_2024](images/masur_transformer_ml.png)\n\n## Zero-shot classification\n\n![Abbildungen von [Philipp K. Masur](https://philippmasur.de/); Zur Entwicklung von Computational Text Analysis: @bachl_computational_2024](images/masur_zeroshot.png)\n\n## Zero-shot classification: Hype (?)\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n![[@gilardi_chatgpt_2023]](images/gilardi.png)\n:::\n\n::: {.column width=\"50%\"}\n![[@heseltine_large_2024]](images/heseltine2024.png)\n:::\n\n::::\n\n# Zero-shot classification: Umsetzung mit der OpenAI-API\n\n## Zero-shot classification: OpenAI-API\n\n- Beispiel: Klassifikation von Inzivilit√§t in Social-Media-Kommentaren\n\n. . . \n\n- Klassifikation mit [OpenAI GPT-4o](https://openai.com/gpt-4o) und `httr2`\n\n- Nachmachen: üëâ `bsp_zero_shot_openai.R` (mit OpenAI-Account)\n\n### Genutzte Pakete\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2) # Kommunikation mit API √ºber HTTP\nlibrary(jsonlite) # JSON-Dateien\nlibrary(tidyverse) # Datenmanipulation und Grafik\n```\n:::\n\n\n\n## Erkennen von Inzivilit√§t in Social-Media-Kommentaren [@stoll_developing_2023]\n\nKommentar mit mindestens einer der folgenden Eigenschaften gilt als inzivil:\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- Vulg√§re, unangemessene Sprache, Fluchen\n- Beleidigung, Profanit√§t\n- Entmenschlichung \n- Sarkasmus, Spott, Zynismus\n- Negative Stereotype\n:::\n\n::: {.column width=\"50%\"}\n- Diskriminierung\n- Androhung von Gewalt\n- Verweigerung von Rechten\n- Vorwurf der L√ºge\n- Erniedrigung, fehlender Respekt, Abwertung\n:::\n::::\n\n## Untersuchungsmaterial\n\nWir brauchen ein paar Kommentare zum Testen:\n\n- Einen klar inzivilen Kommentar\n\n- Einen klar nicht inzivilen Kommentar\n\n- Zwei mehrdeutige Kommentare:\n\n    - Einen *nicht* inzivilen Kommentar, der f√§lschlicherweise als inzivil klassifiziert wird\n    - Einen inzivilen Kommentar, der f√§lschlicherweise als *nicht* inzivil klassifiziert wird\n\n\n## URL f√ºr Anfrage\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreq = request(base_url = \"https://api.openai.com/v1/chat/completions\")\nreq |> \n  req_dry_run()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGET /v1/chat/completions HTTP/1.1\nHost: api.openai.com\nUser-Agent: httr2/1.0.1 r-curl/5.2.1 libcurl/8.7.1\nAccept: */*\nAccept-Encoding: deflate, gzip\n```\n\n\n:::\n:::\n\n\n\n\n## Key zur Anmeldung bei OpenAI\n\n::: {.callout-important}\nSchl√ºssel und Token niemals √∂ffentlich teilen!\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkey = readLines(\"openai_key.txt\")\n\nreq |> \n  req_auth_bearer_token(key) |> \n  req_dry_run()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGET /v1/chat/completions HTTP/1.1\nHost: api.openai.com\nUser-Agent: httr2/1.0.1 r-curl/5.2.1 libcurl/8.7.1\nAccept: */*\nAccept-Encoding: deflate, gzip\nAuthorization: <REDACTED>\n```\n\n\n:::\n:::\n\n\n\n## Prompt (1)\n\n### Codieranweisung: Was soll KI-Assistent tun?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstr = paste(readLines(\"codieranweisung.txt\"), collapse = \"\\n\")\ncat(instr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nYour task is to assist in the classification of social media commments.\nYou will receive a comment that was posted to a social media plattform.\nYour task is to classify the commment as either incivil or civil.\n\nIncivility is defined as a statement that contains any of the following features:\nVulgarity, Inappropriate Language, Swearing, Insults, Name Calling, Profanity,\nDehumanization, Sarcasm, Mockery, Cynicism, Negative Stereotypes, Discrimination,\nThreats of Violence, Denial of Rights, Accusations of Lying, Degradation,\nDisrespect, Devaluation.\n\nFill out the provided JSON response form.\nFirst, provide your reasoning to decide whether the search query is incivil or civil.\nThen give your classification.\n```\n\n\n:::\n:::\n\n\n\n[@tornberg_best_2024]\n\n## Prompt (2)\n\n### Kategoriensystem: Wie soll die Antwort aussehen?\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nresponse_format = list(\n  type = \"json_schema\",\n  json_schema = list(\n    name = \"social_media_incivility\",\n    schema = list(\n      type = \"object\",\n      properties = list(\n        reasoning = list(\n          description = \"Short text to explain your reasoning\",\n          type = \"string\"\n        ),\n        classification = list(\n          description = \"Classification into incivil or civil\",\n          type = \"string\",\n          enum = c(\"incivil\", \"civil\")\n        )\n      ),\n      additionalProperties = FALSE,\n      required = c(\"reasoning\", \"classification\")\n    )\n  )\n)\nresponse_format |> \n  toJSON() |> \n  prettify()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{\n    \"type\": [\n        \"json_schema\"\n    ],\n    \"json_schema\": {\n        \"name\": [\n            \"social_media_incivility\"\n        ],\n        \"schema\": {\n            \"type\": [\n                \"object\"\n            ],\n            \"properties\": {\n                \"reasoning\": {\n                    \"description\": [\n                        \"Short text to explain your reasoning\"\n                    ],\n                    \"type\": [\n                        \"string\"\n                    ]\n                },\n                \"classification\": {\n                    \"description\": [\n                        \"Classification into incivil or civil\"\n                    ],\n                    \"type\": [\n                        \"string\"\n                    ],\n                    \"enum\": [\n                        \"incivil\",\n                        \"civil\"\n                    ]\n                }\n            },\n            \"additionalProperties\": [\n                false\n            ],\n            \"required\": [\n                \"reasoning\",\n                \"classification\"\n            ]\n        }\n    }\n}\n \n```\n\n\n:::\n:::\n\n\n\n\n## Prompt (3)\n\n### Codiereinheiten: Was soll klassifiziert werden?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncod = readLines(\"comments.txt\")\ncat(cod, sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDas Outfit sieht wirklich toll aus heute <3\nDu bist ein gef√§hrlicher linksextremer Verschw√∂rungstheoretiker!\nL√úGENPRESSE!!!11!\nDu Clown!\nDu Clown :)\nSchlafschafe\nAuf Fotos bist du h√ºbscher.\n```\n\n\n:::\n:::\n\n\n\n## Anfrage\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreq |> \n  req_auth_bearer_token(key) |> \n  req_body_json(list(\n    model = \"gpt-4o\",\n    messages = list(\n      list(role = \"system\", content = instr),\n      list(role = \"user\", content = cod[1])\n    ),\n    response_format = response_format,\n    temperature = 0,\n    max_completion_tokens = 500\n  )) |> \n  req_dry_run()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPOST /v1/chat/completions HTTP/1.1\nHost: api.openai.com\nUser-Agent: httr2/1.0.1 r-curl/5.2.1 libcurl/8.7.1\nAccept: */*\nAccept-Encoding: deflate, gzip\nAuthorization: <REDACTED>\nContent-Type: application/json\nContent-Length: 1303\n\n{\"model\":\"gpt-4o\",\"messages\":[{\"role\":\"system\",\"content\":\"Your task is to assist in the classification of social media commments.\\nYou will receive a comment that was posted to a social media plattform.\\nYour task is to classify the commment as either incivil or civil.\\n\\nIncivility is defined as a statement that contains any of the following features:\\nVulgarity, Inappropriate Language, Swearing, Insults, Name Calling, Profanity,\\nDehumanization, Sarcasm, Mockery, Cynicism, Negative Stereotypes, Discrimination,\\nThreats of Violence, Denial of Rights, Accusations of Lying, Degradation,\\nDisrespect, Devaluation.\\n\\nFill out the provided JSON response form.\\nFirst, provide your reasoning to decide whether the search query is incivil or civil.\\nThen give your classification.\"},{\"role\":\"user\",\"content\":\"Das Outfit sieht wirklich toll aus heute <3\"}],\"response_format\":{\"type\":\"json_schema\",\"json_schema\":{\"name\":\"social_media_incivility\",\"schema\":{\"type\":\"object\",\"properties\":{\"reasoning\":{\"description\":\"Short text to explain your reasoning\",\"type\":\"string\"},\"classification\":{\"description\":\"Classification into incivil or civil\",\"type\":\"string\",\"enum\":[\"incivil\",\"civil\"]}},\"additionalProperties\":false,\"required\":[\"reasoning\",\"classification\"]}}},\"temperature\":0,\"max_completion_tokens\":500}\n```\n\n\n:::\n:::\n\n\n\n## Antwort\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nresp = req |> \n  req_auth_bearer_token(key) |> \n  req_body_json(list(\n    model = \"gpt-4o\",\n    messages = list(\n      list(role = \"system\", content = instr),\n      list(role = \"user\", content = cod[1])\n    ),\n    response_format = response_format,\n    temperature = 0,\n    max_completion_tokens = 500\n  )) |> \n  req_perform()\n\nresp |> \n  resp_body_string() |> \n  prettify()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{\n    \"id\": \"chatcmpl-Arj7cfSPYhq4EgmOI7KuVaZOym4Fb\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737368196,\n    \"model\": \"gpt-4o-2024-08-06\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"{\\\"reasoning\\\":\\\"The comment is a positive compliment about someone's outfit and contains no elements of incivility such as insults, vulgarity, or disrespect.\\\",\\\"classification\\\":\\\"civil\\\"}\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 245,\n        \"completion_tokens\": 36,\n        \"total_tokens\": 281,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": \"fp_4691090a87\"\n}\n \n```\n\n\n:::\n:::\n\n\n\n## Alle Kommentare {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Anfragen f√ºr alle Kommentare ####\nreq_list = cod |> \n  map(~ {\n    req |> \n      req_auth_bearer_token(key) |> \n      req_body_json(list(\n        model = \"gpt-4o\",\n        messages = list(\n          list(role = \"system\", content = instr),\n          list(role = \"user\", content = .x)\n        ),\n        response_format = response_format,\n        temperature = 0,\n        max_completion_tokens = 500\n      )) \n  })\n\n# Antworten f√ºr alle Kommentare ####\nresp_list = req_list |> \n  req_perform_parallel()\n\n# Extrahieren und aufbereiten ####\ntibble(Kommentar = cod) |> \n  bind_cols(\n    resp_list |> \n      map_dfr( ~ {\n        .x |> \n          resp_body_json() |> \n          _$choices |> \n          _[[1]] |> \n          _$message |> \n          _$content |> \n          fromJSON() |> \n          as_tibble()\n      })\n  ) |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|Kommentar                                                        |reasoning                                                                                                                                                                                                                                                                                                                         |classification |\n|:----------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------|\n|Das Outfit sieht wirklich toll aus heute <3                      |The comment is a positive compliment about someone's outfit and does not contain any features of incivility such as insults, vulgarity, or disrespect.                                                                                                                                                                            |civil          |\n|Du bist ein gef√§hrlicher linksextremer Verschw√∂rungstheoretiker! |The comment includes name-calling and an accusation, labeling someone as a 'dangerous left-wing extremist conspiracy theorist,' which is disrespectful and demeaning.                                                                                                                                                             |incivil        |\n|L√úGENPRESSE!!!11!                                                |The term 'L√ºgenpresse' is a derogatory term that translates to 'lying press' and is used to accuse the media of being deceitful. It is often associated with accusations of lying and disrespect towards journalists, which falls under the category of incivility.                                                               |incivil        |\n|Du Clown!                                                        |The comment 'Du Clown!' can be considered as name-calling, which is a form of insult. Name-calling is a feature of incivility as it devalues and disrespects the person being addressed.                                                                                                                                          |incivil        |\n|Du Clown :)                                                      |The comment 'Du Clown :)' can be interpreted as name-calling or mockery, which are features of incivility. The use of 'clown' in this context is likely intended to belittle or insult the person it is directed at, even if it is accompanied by a smiley face.                                                                  |incivil        |\n|Schlafschafe                                                     |The term 'Schlafschafe' is a derogatory term in German, often used to insult or mock people who are perceived as blindly following authority or mainstream opinions. It can be considered a form of name-calling and dehumanization, as it implies that the person is like a 'sheep' that is asleep, lacking independent thought. |incivil        |\n|Auf Fotos bist du h√ºbscher.                                      |The comment implies that the person looks better in photos than in real life, which can be interpreted as a form of mockery or sarcasm. This can be seen as a subtle insult or devaluation of the person's appearance in real life.                                                                                               |incivil        |\n\n\n:::\n:::\n\n\n\n## Zero-shot classification\n\n- Generative LLMs und Natural language inference (NLI) [@laurer_less_2023]\n\n- Rasant entwickelndes Forschungsfeld:\n\n    - Verbesserungen durch weiterentwickelte Modelle\n    - Evaluation der Performance: Was geht, was (noch) nicht?\n    - Prompt engineering: Welche Codieranweisungen sind besser?\n    - Forschungethische Fragen: Biases, Reproduzierbarkeit, Abg√§ngigkeit von propriet√§ren Modellen\n\n- Selbst ausprobieren - es ist nicht so schwer, wie es am Anfang aussieht.\n\n# Fragen?\n\n# Vielen Dank\n\nMarko Bachl\n\n[marko.bachl\\@fu-berlin.de](mailto:marko.bachl@fu-berlin.de){.email}\n\n## Literatur {.smaller .scrollable}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}