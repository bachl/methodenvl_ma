{
  "hash": "417d8fde2f1bdda3e771569968cf3a28",
  "result": {
    "markdown": "---\ntitle: |\n       | Kommunikationsforschung mit APIs:\n       | Eine ~~nicht~~ technische Einf√ºhrung\nsubtitle: \"Vorlesung: Methoden der empirischen Kommunikations- und Medienforschung I / Datenerhebung, Wintersemester 2023/2024\"\nlang: \"de\"\ndate: today\ndate-format: \"DD. MM. YYYY\"\nauthor: Marko Bachl\ninstitute: Freie Universit√§t Berlin\nformat:\n  revealjs:\n      embed-resources: false\n      height: 900\n      width: 1600\n      theme: theme.scss\n      highlight-style: github-dark\n      slide-number: c\n      code-line-numbers: false\n      history: false\n      smaller: false\n      title-slide-attributes:\n        data-background-image: https://upload.wikimedia.org/wikipedia/de/7/71/Fub-logo.svg\n        data-background-position: \"top right\"\n        data-background-size: auto\ncss: colors.css\nbibliography: references.bib\ncsl: https://www.zotero.org/styles/apa\ncallout-appearance: simple\nexecute: \n  eval: true\n  echo: true\n---\n\n\n# Hallo\n\n## Arbeitsstelle Digitale Forschungsmethoden\n\n![dall-e-3, Prompt: A team of communication researchers using digital research methods and computational methods, cyberpunk style](images/as_digimeth.png)\n\n## Dieses Bild habe ich mit einer API erstellt\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr)\nlibrary(jsonlite)\nkey = readLines(\"openai_key.txt\")\nurl <- \"https://api.openai.com/v1/images/generations\"\nheaders <- c(\n  \"Content-Type\" = \"application/json\",\n  \"Authorization\" = paste0(\"Bearer \", key)\n)\nbody <- list(\n  model = \"dall-e-3\",\n  prompt = \"A team of communication researchers using digital research methods and computational methods, cyberpunk style\",\n  n = 1,\n  size = \"1024x1024\"\n)\nresponse <- POST(url, body = toJSON(body, auto_unbox = TRUE), encode = \"json\", add_headers(.headers=headers))\ndownload.file(url = content(response)$data[[1]]$url, destfile = \"images/as_digimeth.png\")\n```\n:::\n\n\nNachmachen: üëâ `bsp_dall-e.R` (mit OpenAI-Account, kostet $0.04/Bild)\n\n## Pr√§sentation und Code\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n[![](methoden1_ma_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='left' width=60%}](https://bachl.github.io/methodenvl_ma/)\n:::\n:::\n\n\nPr√§sentation: <https://bachl.github.io/methodenvl_ma/>\n\nCode: <https://github.com/bachl/methodenvl_ma>\n\n## Agenda\n\n1.  Was ist eine API?\n\n2.  Verbreiteter Einsatz in PuK: Erhebung digitaler Inhalte\n\n    a)  Vor und nach der *APIcalypse*\n    \n    a)  Umsetzung mit `R` und `{httr2}`\n\n3.  Neuerer Einsatz in PuK: Nutzung von Cloud-Diensten (z.B. KI)\n\n    a)  Zero-shot classification: Kurze Einf√ºhrung\n\n    b)  Zero-shot classification: Umsetzung mit der OpenAI-API\n\n# Was ist eine API?\n\n## Was ist eine API?\n\n-   **A**pplication **P**rogramming **I**nterface = Programmierschnittstelle\n    -   Austausch maschinenlesbarer Daten zwischen verschiedenen Programmen/Computern\n    \n. . . \n\n-   **Web-APIs** nutzen die gleichen Protokolle wie Browser, aber liefern anderen Datenstrukturen\n    -   Formate sind standardisiert (z.B. XML oder JSON), Inhalte variieren\n    -   oft nutzen Plattformen f√ºr ihre eigenen (Mobil-) Apps ebenfalls APIs\n\n## Ein einfaches Beispiel\n\n![[Breaking Bad Quotes API](https://breakingbadquotes.xyz/)](images/clipboard-1478015886.png)\n\n## Ein einfaches Beispiel\n\n### Anfrage\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbb_quote <- readLines(\"https://api.breakingbadquotes.xyz/v1/quotes\")\n```\n:::\n\n\n::: {.fragment}\n### Antwort\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbb_quote |> jsonlite::prettify()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[\n    {\n        \"quote\": \"So you do have a plan? Yeah, Mr. White! Yeah, science!\",\n        \"author\": \"Jesse Pinkman\"\n    }\n]\n \n```\n:::\n:::\n\n:::\n\n## Grundbegriffe\n\n::: {.incremental}\n- Server-Client-Prinzip: Server definiert Schnittstelle, Client kann diese abfragen\n\n- REST API: **Re**presentational **s**tate **t**ransfer, Wortneusch√∂pfung; beschreibt abstrakt den Aufbau eines Datennetzwerks (z.B. des WWW); *stateless*, d.h., es passiert nur bei einer Anfrage etwas.\n\n- Streaming API: Verbindung bleibt √ºber einen Zeitraum bestehen, wenn auf dem Server etwas passiert, wird es an Client gesendet.\n\n- Endpoint: URL, mit der ein API-Aufruf beginnt; Die meisten APIs haben mehrere Endpoints, in die sie verschiedene Inhalte und Dienste sortieren.\n\n- Parameter: M√∂glichkeit, weiter zu spezifizieren, was der API-Endpoint liefern soll.\n\n<!-- - JSON: **J**avaScript **O**bject **N**otation; Dateiformat f√ºr hierarchisch angeordnete, nicht (zwingend) rechteckige Daten. -->\n:::\n\n## Nachlesen\n\n![[@haim_computational_2023, Kapitel 5.3]](https://media.springernature.com/full/springer-static/cover-hires/book/978-3-658-40171-9?as=webp)\n\n# Verbreiteter Einsatz in PuK: Erhebung digitaler Inhalte\n\n# Vor der *APIcalypse*: Kommunikationsspuren auf Social Media\n\n## Bundestagswahlkampf 2017 auf Facebook\n\n![Datenstruktur des Projekts Multilevel Flows of Political Communication on Facebook (Bachl & Scharkow, 2020-2023)](images/clipboard-3907966241.png)\n\n- Facebook Graph API, zus√§tzlich YouTube Data API und Scraping\n\n- Abfrage von ca. 400 politischen FB-Seiten alle 6 Stunden √ºber ca. ein Jahr\n\n\n<!-- ## Digitale Verhaltensspuren auf Individualebene -->\n\n<!-- ![[@winkler_individual_2022]](images/clipboard-1478384870.png) -->\n\n## Digitale Verhaltensspuren auf Individualebene\n\n![[@winkler_individual_2022]](images/clipboard-1996524043.png)\n\n<!-- ## Digitale Verhaltensspuren auf Individualebene -->\n\n<!-- ![[@winkler_individual_2022]](images/clipboard-685317092.png) -->\n\n<!-- ## Digitale Verhaltensspuren auf Individualebene -->\n\n<!-- ### Vorhersage inziviler Kommentare -->\n\n<!-- ![(Winkler, Scharkow, Bachl & J√ºrgens, working paper)](images/meta_offensive.png) -->\n\n## Digitale Verhaltensspuren auf Individualebene\n\n### Vorhersage des Ausstiegs aus der Diskussion\n\n![(Winkler, Scharkow, Bachl & J√ºrgens, working paper)](images/meta_islast.png)\n\n## Post-API-age & APIcalypse\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n![[@freelon_computational_2018]](images/freelon.png)\n:::\n\n::: {.column width=\"50%\"}\n![[@bruns_after_2019]](images/bruns.png)\n:::\n\n::::\n\n## Post-API-age & APIcalypse\n\n- APIs der meisten gro√üen Social-Media-Plattformen mehr oder weniger geschlossen\n\n    - Keine (praktikablen) Zug√§nge zu Facebook, Instagram, Twitter\n\n    - Eingeschr√§nkter Zugang zu TikTok, YouTube (aber kaum zu SN-Features)\n\n    - Zugang zu kleineren Plattformen, z.B. BlueSky, Mastodon\n\n- Problem: Willk√ºr der Anbieter\n\n- Hoffnung: EU Digital Services Act (DSA)\n\n## APIs are alive and well\n\n- Trotzdem: APIs bleiben wichtiges Werkzeug f√ºr digitale Forschungsmethoden, wenn auch (aktuell) weniger f√ºr Social-Media-Forschung\n\n- Datenzugang: [Bundestag](https://dip.bundestag.de/%C3%BCber-dip/hilfe/api), [MediaWiki Action API](https://www.mediawiki.org/wiki/API:Main_page) (u.a. Wikipedia), [Wikimedia REST API](https://wikimedia.org/api/rest_v1/#/), [YouTube](https://developers.google.com/youtube/v3?hl=de), [Telegram](https://core.telegram.org/#api-methods), [Tagesschau](https://tagesschau.api.bund.dev/), [The Guardian](https://open-platform.theguardian.com/), [DESTATIS](https://www.destatis.de/DE/Service/OpenData/genesis-api-webservice-oberflaeche.html), ...\n\n- Kommunikation mit Cloud-Diensten (2. Teil der Sitzung)\n\n# Umsetzung mit `R` und `{httr2}`\n\n## Umsetzung mit `R` und `{httr2}`\n\n- Beispiel: Aufmerksamkeit f√ºr Olaf Scholz, Robert Habeck und Christian Lindner in den letzten drei Wochen --- gemessen an den Aufrufen ihrer Wikipedia-Seiten\n\n. . . \n\n:::: {.columns}\n\n::: {.column width=\"70%\"}\n- Umsetzung mit [MediaWiki Action API](https://www.mediawiki.org/wiki/API:Main_page), Endpoint [PageViewInfo](https://www.mediawiki.org/wiki/Extension:PageViewInfo#API)\n\n- Nachmachen: üëâ `bsp_wikipedia.R`\n:::\n\n::: {.column width=\"30%\"}\n![<https://httr2.r-lib.org/>](https://httr2.r-lib.org/logo.png)\n:::\n\n::::\n\n\n## Genutzte Pakete\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2) # Kommunikation mit API √ºber HTTP\nlibrary(jsonlite) # JSON-Dateien\nlibrary(tidyverse) # Datenmanipulation und Grafik\n```\n:::\n\n\n\n## Anfrage an die API\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nreq = request(\n  base_url = \"https://de.wikipedia.org/w/api.php\"\n) |> \n  req_url_query(!!!list(\n    action = \"query\",\n    format = \"json\",\n    prop = \"pageviews\",\n    titles = c(\"Olaf_Scholz\", \n               \"Robert_Habeck\", \n               \"Christian_Lindner\"),\n    pvipdays = 21),\n    .multi = \"pipe\")\nreq |> \n  req_dry_run()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGET /w/api.php?action=query&format=json&prop=pageviews&titles=Olaf_Scholz|Robert_Habeck|Christian_Lindner&pvipdays=21 HTTP/1.1\nHost: de.wikipedia.org\nUser-Agent: httr2/1.0.0 r-curl/5.2.0 libcurl/8.1.2\nAccept: */*\nAccept-Encoding: deflate, gzip\n```\n:::\n:::\n\n\n\n## Antwort der API\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nresp = req|> \n  req_perform()\n\nresp |> \n  resp_body_string() |> \n  jsonlite::prettify()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n    \"batchcomplete\": \"\",\n    \"query\": {\n        \"normalized\": [\n            {\n                \"from\": \"Olaf_Scholz\",\n                \"to\": \"Olaf Scholz\"\n            },\n            {\n                \"from\": \"Robert_Habeck\",\n                \"to\": \"Robert Habeck\"\n            },\n            {\n                \"from\": \"Christian_Lindner\",\n                \"to\": \"Christian Lindner\"\n            }\n        ],\n        \"pages\": {\n            \"855225\": {\n                \"pageid\": 855225,\n                \"ns\": 0,\n                \"title\": \"Christian Lindner\",\n                \"pageviews\": {\n                    \"2023-12-25\": 1384,\n                    \"2023-12-26\": 1470,\n                    \"2023-12-27\": 1627,\n                    \"2023-12-28\": 1405,\n                    \"2023-12-29\": 1219,\n                    \"2023-12-30\": 2735,\n                    \"2023-12-31\": 2239,\n                    \"2024-01-01\": 2193,\n                    \"2024-01-02\": 1758,\n                    \"2024-01-03\": 2020,\n                    \"2024-01-04\": 1597,\n                    \"2024-01-05\": 1925,\n                    \"2024-01-06\": 4738,\n                    \"2024-01-07\": 3769,\n                    \"2024-01-08\": 2967,\n                    \"2024-01-09\": 2251,\n                    \"2024-01-10\": 3807,\n                    \"2024-01-11\": 3208,\n                    \"2024-01-12\": 2217,\n                    \"2024-01-13\": 1988,\n                    \"2024-01-14\": 2402\n                }\n            },\n            \"293388\": {\n                \"pageid\": 293388,\n                \"ns\": 0,\n                \"title\": \"Olaf Scholz\",\n                \"pageviews\": {\n                    \"2023-12-25\": 2834,\n                    \"2023-12-26\": 2593,\n                    \"2023-12-27\": 2902,\n                    \"2023-12-28\": 2369,\n                    \"2023-12-29\": 2522,\n                    \"2023-12-30\": 2724,\n                    \"2023-12-31\": 7523,\n                    \"2024-01-01\": 3596,\n                    \"2024-01-02\": 2782,\n                    \"2024-01-03\": 2553,\n                    \"2024-01-04\": 3805,\n                    \"2024-01-05\": 4057,\n                    \"2024-01-06\": 3874,\n                    \"2024-01-07\": 4349,\n                    \"2024-01-08\": 5224,\n                    \"2024-01-09\": 4428,\n                    \"2024-01-10\": 3938,\n                    \"2024-01-11\": 4656,\n                    \"2024-01-12\": 3874,\n                    \"2024-01-13\": 3471,\n                    \"2024-01-14\": 4259\n                }\n            },\n            \"1569620\": {\n                \"pageid\": 1569620,\n                \"ns\": 0,\n                \"title\": \"Robert Habeck\",\n                \"pageviews\": {\n                    \"2023-12-25\": 3187,\n                    \"2023-12-26\": 3000,\n                    \"2023-12-27\": 2997,\n                    \"2023-12-28\": 2480,\n                    \"2023-12-29\": 2204,\n                    \"2023-12-30\": 2428,\n                    \"2023-12-31\": 3029,\n                    \"2024-01-01\": 2490,\n                    \"2024-01-02\": 2058,\n                    \"2024-01-03\": 2022,\n                    \"2024-01-04\": 4720,\n                    \"2024-01-05\": 23330,\n                    \"2024-01-06\": 12211,\n                    \"2024-01-07\": 8450,\n                    \"2024-01-08\": 11948,\n                    \"2024-01-09\": 7736,\n                    \"2024-01-10\": 7786,\n                    \"2024-01-11\": 5899,\n                    \"2024-01-12\": 5095,\n                    \"2024-01-13\": 4193,\n                    \"2024-01-14\": 4581\n                }\n            }\n        }\n    }\n}\n \n```\n:::\n:::\n\n\n## Antwort konvertieren und plotten\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nresp |> \n  resp_body_json() |>\n  _$query |> \n  _$pages |> \n  map_dfr(as_tibble) |> \n  mutate(date = as_date(names(pageviews))) |> \n  unnest(pageviews) |> \n  ggplot(aes(date, pageviews, color = title)) + \n  geom_line() + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](methoden1_ma_files/figure-revealjs/unnamed-chunk-8-1.png){width=1600px}\n:::\n:::\n\n\n## Umsetzung mit `R` und `{httr2}`\n\n- Workflow: API finden, Dokumentation verstehen, Daten abfragen, aufbereiten, analysieren\n\n- Einschr√§nkung der MediaWiki Action API: Nur letzte 60 Tage\n\n- Alternative: Wikimedia REST API üëâ `bsp_wikipedia_rest.R`\n\n\n# Neuerer Einsatz in PuK: Nutzung von Cloud-Diensten (z.B. KI)\n\n## Nutzung von Cloud-Diensten\n\n- Viele Cloud-Dienste lassen sich √ºber APIs verwenden\n\n- Beispiele aus dem Bereich KI: [Huggingface Inference API](https://huggingface.co/docs/api-inference/index), [OpenAI API](https://platform.openai.com/docs/api-reference), [Perspective API](https://perspectiveapi.com/)\n\n- Workflow ist √§hnlich: Anfrage senden, Antwort erhalten\n\n- Unterschiede: Erfordert fast immer Authentifizierung, h√§ufig kostenpflichtig\n\n# Zero-shot classification: Kurze Einf√ºhrung\n\n## Bag-of-Words Machine Learning\n\n![Abbildungen von [Philipp K. Masur](https://philippmasur.de/)](images/masur_classic_ml.png)\n\n\n## Transfer Learning\n\n![Abbildungen von [Philipp K. Masur](https://philippmasur.de/)](images/masur_transformer_ml.png)\n\n## Zero-shot classification\n\n![Abbildungen von [Philipp K. Masur](https://philippmasur.de/)](images/masur_zeroshot.png)\n\n## Zero-shot classification: Hype (?)\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n![[@gilardi_chatgpt_2023]](images/gilardi.png)\n:::\n\n::: {.column width=\"50%\"}\n![[@rathje_gpt_2023]](images/rathje.png)\n:::\n\n::::\n\n# Zero-shot classification: Umsetzung mit der OpenAI-API\n\n## Zero-shot classification: OpenAI-API\n\n- Beispiel: Klassifikation von Inzivilit√§t in Social-Media-Kommentaren\n\n. . . \n\n- Klassifikation mit [OpenAI GPT-4](https://openai.com/gpt-4) (bekannt aus ChatGPT Premium) und `httr2`\n\n- Nachmachen: üëâ `bsp_zero_shot_openai.R` (mit OpenAI-Account)\n\n### Genutzte Pakete\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2) # Kommunikation mit API √ºber HTTP\nlibrary(jsonlite) # JSON-Dateien\nlibrary(tidyverse) # Datenmanipulation und Grafik\n```\n:::\n\n\n## Erkennen von Inzivilit√§t in Social-Media-Kommentaren [@stoll_developing_2023]\n\nKommentar mit mindestens einer der folgenden Eigenschaften gilt als inzivil:\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- Vulg√§re, unangemessene Sprache, Fluchen\n- Beleidigung, Profanit√§t\n- Entmenschlichung \n- Sarkasmus, Spott, Zynismus\n- Negative Stereotype\n:::\n\n::: {.column width=\"50%\"}\n- Diskriminierung\n- Androhung von Gewalt\n- Verweigerung von Rechten\n- Vorwurf der L√ºge\n- Erniedrigung, fehlender Respekt, Abwertung\n:::\n::::\n\n## Untersuchungsmaterial\n\nWir brauchen ein paar Kommentare zum Testen:\n\n- Einen klar inzivilen Kommentar\n\n- Einen klar nicht inzivilen Kommentar\n\n- Zwei mehrdeutige Kommentare:\n\n    - Einen *nicht* inzivilen Kommentar, der f√§lschlicherweise als inzivil klassifiziert wird\n    - Einen inzivilen Kommentar, der f√§lschlicherweise als *nicht* inzivil klassifiziert wird\n\n\n## URL f√ºr Anfrage\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreq = request(base_url = \"https://api.openai.com/v1/chat/completions\")\nreq |> \n  req_dry_run()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGET /v1/chat/completions HTTP/1.1\nHost: api.openai.com\nUser-Agent: httr2/1.0.0 r-curl/5.2.0 libcurl/8.1.2\nAccept: */*\nAccept-Encoding: deflate, gzip\n```\n:::\n:::\n\n\n\n## Key zur Anmeldung bei OpenAI\n\n::: {.callout-important}\nSchl√ºssel und Token niemals √∂ffentlich teilen!\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkey = readLines(\"openai_key.txt\")\n\nreq |> \n  req_auth_bearer_token(key) |> \n  req_dry_run()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGET /v1/chat/completions HTTP/1.1\nHost: api.openai.com\nUser-Agent: httr2/1.0.0 r-curl/5.2.0 libcurl/8.1.2\nAccept: */*\nAccept-Encoding: deflate, gzip\nAuthorization: <REDACTED>\n```\n:::\n:::\n\n\n## Prompt (1)\n\n### Codieranweisung: Was soll KI-Assistent tun?\n\n::: {.cell}\n\n```{.r .cell-code}\ninstr = paste(readLines(\"instr_nodef_reason.txt\"), collapse = \"\\n\")\ncat(instr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYour task is to evaluate whether a comment contains incivility.\n\nYou should assign the comment a numeric label, 1 or 0.\n1. The comment contains incivility.\n0. The comment does not contain incivility.\n\nAnswer with the number 0 or the number 1, followed by a semi-colon and then a brief motivation. For instance: \"1; The comment is clearly incivil. It has many elements of an incivil comment, such as ...\" Do not use quotation marks.\n```\n:::\n:::\n\n\n[@tornberg_how_2023]\n\n## Prompt (2)\n\n### Codiereinheiten: Was soll klassifiziert werden?\n\n::: {.cell}\n\n```{.r .cell-code}\ncod = readLines(\"comments.txt\")\ncat(cod, sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGet back where you came from!!!!\nWhat a nice foto of you! Love it <3\nYou look better on fotos.\nSure, let's all go out and kill babies.\nFor a woman, you almost made sense here.\n```\n:::\n:::\n\n\n## Anfrage\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreq |> \n  req_auth_bearer_token(key) |> \n  req_body_json(list(\n    model = \"gpt-4\",\n    messages = list(\n      list(role = \"system\", content = instr),\n      list(role = \"user\", content = cod[1])\n    ),\n    temperature = 0,\n    max_tokens = 50\n  )) |> \n  req_dry_run()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPOST /v1/chat/completions HTTP/1.1\nHost: api.openai.com\nUser-Agent: httr2/1.0.0 r-curl/5.2.0 libcurl/8.1.2\nAccept: */*\nAccept-Encoding: deflate, gzip\nAuthorization: <REDACTED>\nContent-Type: application/json\nContent-Length: 593\n\n{\"model\":\"gpt-4\",\"messages\":[{\"role\":\"system\",\"content\":\"Your task is to evaluate whether a comment contains incivility.\\n\\nYou should assign the comment a numeric label, 1 or 0.\\n1. The comment contains incivility.\\n0. The comment does not contain incivility.\\n\\nAnswer with the number 0 or the number 1, followed by a semi-colon and then a brief motivation. For instance: \\\"1; The comment is clearly incivil. It has many elements of an incivil comment, such as ...\\\" Do not use quotation marks.\"},{\"role\":\"user\",\"content\":\"Get back where you came from!!!!\"}],\"temperature\":0,\"max_tokens\":50}\n```\n:::\n:::\n\n\n## Antwort\n\n\n::: {.cell output-location='column' hash='methoden1_ma_cache/revealjs/gpt4call_e542beccc87569add07931287e07d326'}\n\n```{.r .cell-code}\nresp = req |> \n  req_auth_bearer_token(key) |> \n  req_body_json(list(\n    model = \"gpt-4\",\n    messages = list(\n      list(role = \"system\", content = instr),\n      list(role = \"user\", content = cod[1])\n    ),\n    temperature = 0,\n    max_tokens = 50\n  )) |> \n  req_perform()\n\nresp |> \n  resp_body_string() |> \n  prettify()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n    \"id\": \"chatcmpl-8giNlEym3eWA6oAZvrJ1dc3ip7hoD\",\n    \"object\": \"chat.completion\",\n    \"created\": 1705191073,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"1; The comment is incivil as it is disrespectful and offensive, suggesting the person should leave or is not welcome.\"\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 122,\n        \"completion_tokens\": 24,\n        \"total_tokens\": 146\n    },\n    \"system_fingerprint\": null\n}\n \n```\n:::\n:::\n\n\n## Alle Kommentare {.scrollable}\n\n\n::: {.cell hash='methoden1_ma_cache/revealjs/gpt4call2_c6c80e9a0b5059452601ab796977b4c3'}\n\n```{.r .cell-code  code-fold=\"true\"}\nreq_list = cod |> \n  map(~ {\n    req |> \n      req_auth_bearer_token(key) |> \n      req_body_json(list(\n        model = \"gpt-4\",\n        messages = list(\n          list(role = \"system\", content = instr),\n          list(role = \"user\", content = .x)\n        ),\n        temperature = 0,\n        max_tokens = 50\n      ))\n  })\n\n# Antworten f√ºr alle Kommentare ####\nresp_list = req_list |> \n  req_perform_parallel()\n\n# Extrahieren und aufbereiten ####\ntibble(\n  Kommentar = cod,\n  Klassifikation = resp_list |> \n    map_chr( ~ {\n      .x |> \n        resp_body_json() |> \n        _$choices |> \n        _[[1]] |> \n        _$message |> \n        _$content\n    })\n) |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|Kommentar                                |Klassifikation                                                                                                                     |\n|:----------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------|\n|Get back where you came from!!!!         |1; The comment is incivil as it is disrespectful and offensive, suggesting a hostile attitude towards the recipient.               |\n|What a nice foto of you! Love it <3      |0; The comment is positive and complimentary, showing no signs of incivility.                                                      |\n|You look better on fotos.                |1; The comment is incivil as it implies that the person does not look good in person, which can be considered as a form of insult. |\n|Sure, let's all go out and kill babies.  |1; The comment is incivil as it promotes violence and harm, which is inappropriate and offensive.                                  |\n|For a woman, you almost made sense here. |1; The comment is incivil as it contains a sexist remark, implying that women generally do not make sense.                         |\n:::\n:::\n\n\n## Zero-shot classification\n\n- Generative LLMs und Natural language inference (NLI) [@laurer_less_2023]\n\n- Rasant entwickelndes Forschungsfeld:\n\n    - Verbesserungen durch weiterentwickelte Modelle\n    - Evaluation der Performance: Was geht, was (noch) nicht?\n    - Prompt engneering: Welche Codieranweisungen sind besser?\n    - Forschungethische Fragen: Biases, Reproduzierbarkeit, Abg√§ngigkeit von propriet√§ren Modellen\n\n- Wenn Sie sich f√ºr Inhaltsanalyse interessieren: Jetzt einsteigen!\n\n# Fragen?\n\n# Vielen Dank\n\nMarko Bachl\n\n[marko.bachl\\@fu-berlin.de](mailto:marko.bachl@fu-berlin.de){.email}\n\n## Literatur {.smaller .scrollable}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}