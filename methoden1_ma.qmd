---
title: APIs f√ºr Datenerhebung und Inhaltsanalyse
subtitle: "Vorlesung: Methoden der empirischen Kommunikations- und Medienforschung I / Datenerhebung, Wintersemester 2024/2025"
lang: "de"
date: today
date-format: "DD. MM. YYYY"
author: Marko Bachl
institute: Freie Universit√§t Berlin
format:
  revealjs:
      embed-resources: false
      height: 900
      width: 1600
      theme: theme.scss
      highlight-style: github-dark
      slide-number: c
      code-line-numbers: false
      history: false
      smaller: false
      title-slide-attributes:
        data-background-image: https://bachl.quarto.pub/do-women-write-more-about-women/fu-logo-240903-RGB-s.svg
        data-background-position: "top right"
        data-background-size: auto 200px
css: colors.css
bibliography: references.bib
csl: https://www.zotero.org/styles/apa
callout-appearance: simple
execute: 
  eval: true
  echo: true
---

# Hallo

## Arbeitsstelle Digitale Forschungsmethoden

![dall-e-3, Prompt: A team of communication researchers using digital research methods and computational methods, cyberpunk style](images/as_digimeth.png)

## Dieses Bild habe ich mit einer API erstellt

```{r}
#| eval: false
library(httr2)
library(jsonlite)

key = readLines("openai_key.txt")

req = request("https://api.openai.com/v1/images/generations") |>
  req_headers(
    "Content-Type" = "application/json",
    "Authorization" = paste0("Bearer ", key)
  ) |>
  req_body_json(list(
    model = "dall-e-3",
    prompt = "A team of communication researchers using digital research methods and computational methods, cyberpunk style",
    n = 1,
    size = "1024x1024"
  )) |>
  req_perform()

image_url = resp_body_json(req)$data[[1]]$url
download.file(url = image_url, destfile = "as_digimeth.png")
```

Nachmachen: üëâ `bsp_dall-e.R` (mit OpenAI-Account, $0.04/Bild)

## Arbeitsstelle Digitale Forschungsmethoden

![Real life](https://www.polsoz.fu-berlin.de/kommwiss/arbeitsstellen/digitale-methoden/C36EC0EA-05C8-49F8-B9D1-9A91E577CE26-Kopie.jpg)


## Pr√§sentation und Code

```{r}
#| echo: false
#| fig-align: left
#| fig-link: https://bachl.github.io/methodenvl_ma/
#| out.width: "60%"
plot(qrcode::qr_code("https://bachl.github.io/methodenvl_ma/"))
```

Material: [Pr√§sentation HTML](https://bachl.github.io/methodenvl_ma/), [Pr√§sentation PDF](https://github.com/bachl/methodenvl_ma/blob/main/methoden1_ma.pdf), [Code](https://github.com/bachl/methodenvl_ma)

## Agenda

1.  Was ist eine API?

2.  Verbreiteter Einsatz in PuK: Erhebung digitaler Inhalte

    a)  Vor und nach der *APIcalypse*
    
    a)  Umsetzung mit `R` und `{httr2}`

3.  Neuerer Einsatz in PuK: Nutzung von Cloud-Diensten (z.B. KI)

    a)  Zero-shot classification: Kurze Einf√ºhrung

    b)  Zero-shot classification: Umsetzung mit der OpenAI-API

# Was ist eine API?

## Was ist eine API?

-   **A**pplication **P**rogramming **I**nterface = Programmierschnittstelle
    -   Austausch maschinenlesbarer Daten zwischen verschiedenen Programmen/Computern
    
. . . 

-   **Web-APIs** nutzen die gleichen Protokolle wie Browser, aber liefern anderen Datenstrukturen
    -   Formate sind standardisiert (z.B. XML oder JSON), Inhalte variieren
    -   oft nutzen Plattformen f√ºr ihre eigenen (Mobil-) Apps ebenfalls APIs

## Ein einfaches Beispiel

![[Breaking Bad Quotes API](https://breakingbadquotes.xyz/)](images/clipboard-1478015886.png)

## Ein einfaches Beispiel

### Anfrage

```{r}
library(httr2); library(jsonlite)
bb_quote = request(base_url = "https://api.breakingbadquotes.xyz/v1/quotes") |> req_perform()
```

::: {.fragment}
### Antwort

```{r}
bb_quote |> resp_body_string() |> prettify()
```
:::

## Grundbegriffe

::: {.incremental}
- Server-Client-Prinzip: Server definiert Schnittstelle, Client kann diese abfragen

- REST API: **Re**presentational **s**tate **t**ransfer, Wortneusch√∂pfung; beschreibt abstrakt den Aufbau eines Datennetzwerks (z.B. des WWW); *stateless*, d.h., es passiert nur bei einer Anfrage etwas.

- Streaming API: Verbindung bleibt √ºber einen Zeitraum bestehen, wenn auf dem Server etwas passiert, wird es an Client gesendet.

- Endpoint: URL, mit der ein API-Aufruf beginnt; Die meisten APIs haben mehrere Endpoints, in die sie verschiedene Inhalte und Dienste sortieren.

- Parameter: M√∂glichkeit, weiter zu spezifizieren, was der API-Endpoint liefern soll.

<!-- - JSON: **J**avaScript **O**bject **N**otation; Dateiformat f√ºr hierarchisch angeordnete, nicht (zwingend) rechteckige Daten. -->
:::

## Nachlesen

![[@haim_computational_2023, Kapitel 5.3]](https://media.springernature.com/full/springer-static/cover-hires/book/978-3-658-40171-9?as=webp)

# Verbreiteter Einsatz in PuK: Erhebung digitaler Inhalte

# Vor der *APIcalypse*: Kommunikationsspuren auf Social Media

## (Alternative) media sources in AfD-centered Facebook discussions

> The study is based on all posts, comments,
and replies on core AfD Facebook
pages during the year 2016, as
they could be retrieved during the last
week of the year. The Facebook Graph
API (https://developers.facebook.com/docs/graphapi)
was used for the main data collection.

:::{.aside}
[@bachl_alternative_2018]
:::

## (Alternative) media sources in AfD-centered Facebook discussions

> the sample
consisted of 122 pages, mostly of
regional and local sections of the party,
of its youth organization Junge Alternative,
and of AfD politicians. All
posts on these pages (n = 170,033), all
comments to the posts (n = 1,455,200),
and all replies to the comments (n =
960,077) were retrieved (overall n =
2,585,310).

:::{.aside}
[@bachl_alternative_2018]
:::

##

![[@bachl_alternative_2018]](images/bachl2018.png)


## Post-API-age & APIcalypse

:::: {.columns}

::: {.column width="50%"}
![[@freelon_computational_2018]](images/freelon.png)
:::

::: {.column width="50%"}
![[@bruns_after_2019]](images/bruns.png)
:::

::::

## Post-API-age & APIcalypse

- APIs der meisten gro√üen Social-Media-Plattformen mehr oder weniger geschlossen oder f√ºr Grundlagenforschung unbezahlbar.

    - Keine (praktikablen) Zug√§nge zu Facebook, Instagram, Twitter

    - Eingeschr√§nkter Zugang zu TikTok, Reddit, YouTube (aber kaum zu SN-Features)

    - Zugang zu kleineren Plattformen, z.B. BlueSky, Mastodon, Telegram

- Problem: Willk√ºr der Anbieter

- Hoffnung: EU Digital Services Act (DSA)

## APIs are alive and well

- Trotzdem: APIs bleiben wichtiges Werkzeug f√ºr digitale Forschungsmethoden, wenn auch (aktuell) weniger f√ºr Social-Media-Forschung

- Datenzugang: [Bundestag](https://dip.bundestag.de/%C3%BCber-dip/hilfe/api), [MediaWiki Action API](https://www.mediawiki.org/wiki/API:Main_page) (u.a. Wikipedia), [Wikimedia REST API](https://wikimedia.org/api/rest_v1/#/), [YouTube](https://developers.google.com/youtube/v3?hl=de), [Telegram](https://core.telegram.org/#api-methods), [Tagesschau](https://tagesschau.api.bund.dev/), [The Guardian](https://open-platform.theguardian.com/), [DESTATIS](https://www.destatis.de/DE/Service/OpenData/genesis-api-webservice-oberflaeche.html), ...

- Kommunikation mit Cloud-Diensten (2. Teil der Sitzung)

# Umsetzung mit `R` und `{httr2}`

## Umsetzung mit `R` und `{httr2}`

- Beispiel: Aufmerksamkeit f√ºr Spitzenkandidat:innen in den letzten drei Wochen --- gemessen an den Aufrufen ihrer Wikipedia-Seiten

. . . 

:::: {.columns}

::: {.column width="70%"}
- Umsetzung mit [MediaWiki Action API](https://www.mediawiki.org/wiki/API:Main_page), Endpoint [PageViewInfo](https://www.mediawiki.org/wiki/Extension:PageViewInfo#API)

- Nachmachen: üëâ `bsp_wikipedia.R`
:::

::: {.column width="30%"}
![<https://httr2.r-lib.org/>](https://httr2.r-lib.org/logo.png)
:::

::::


## Genutzte Pakete
```{r}
library(httr2) # Kommunikation mit API √ºber HTTP
library(jsonlite) # JSON-Dateien
library(tidyverse) # Datenmanipulation und Grafik

```


## Anfrage an die API

```{r}
#| output-location: fragment
req = request(base_url = "https://de.wikipedia.org/w/api.php") |> 
  req_url_query(!!!list(
    action = "query",
    format = "json",
    prop = "pageviews",
    titles = c("Olaf_Scholz", "Robert_Habeck",
               "Christian_Lindner", "Alice_Weidel",
               "Sahra_Wagenknecht", "Friedrich_Merz"),
    pvipdays = 21),
    .multi = "pipe")
req |> 
  req_dry_run()
```


## Antwort der API

```{r}
#| output-location: column-fragment
resp = req|> 
  req_perform()

resp |> 
  resp_body_string() |> 
  prettify()
```

## Antwort konvertieren und plotten

```{r}
#| output-location: slide
#| out-width: "1600px"
resp |> 
  resp_body_json() |>
  _$query |> 
  _$pages |> 
  map_dfr(as_tibble) |> 
  mutate(date = as_date(names(pageviews))) |> 
  unnest(pageviews) |> 
  ggplot(aes(date, pageviews, color = title)) + 
  geom_line() + 
  scale_y_log10(labels = scales::label_comma()) +
  theme_minimal()
```

## Umsetzung mit `R` und `{httr2}`

- Workflow: API finden, Dokumentation verstehen, Daten abfragen, aufbereiten, analysieren

- Einschr√§nkung der MediaWiki Action API: Nur letzte 60 Tage

- Alternative: Wikimedia REST API üëâ `bsp_wikipedia_rest.R`

# Fragen?

# Neuerer Einsatz in PuK: Nutzung von Cloud-Diensten (z.B. KI)

## Nutzung von Cloud-Diensten

- Viele Cloud-Dienste lassen sich √ºber APIs verwenden

- Beispiele aus dem Bereich KI: [Huggingface Inference API](https://huggingface.co/docs/api-inference/index), [OpenAI API](https://platform.openai.com/docs/api-reference), [Perspective API](https://perspectiveapi.com/)

- Workflow ist √§hnlich: Anfrage senden, Antwort erhalten

- Unterschiede: Erfordert fast immer Authentifizierung, h√§ufig kostenpflichtig

# Zero-shot classification: Kurze Einf√ºhrung

## Bag-of-Words Machine Learning

![Abbildungen von [Philipp K. Masur](https://philippmasur.de/); Zur Entwicklung von Computational Text Analysis: @bachl_computational_2024](images/masur_classic_ml.png)


## Transfer Learning

![Abbildungen von [Philipp K. Masur](https://philippmasur.de/); Zur Entwicklung von Computational Text Analysis: @bachl_computational_2024](images/masur_transformer_ml.png)

## Zero-shot classification

![Abbildungen von [Philipp K. Masur](https://philippmasur.de/); Zur Entwicklung von Computational Text Analysis: @bachl_computational_2024](images/masur_zeroshot.png)

## Zero-shot classification: Hype (?)

:::: {.columns}

::: {.column width="50%"}
![[@gilardi_chatgpt_2023]](images/gilardi.png)
:::

::: {.column width="50%"}
![[@heseltine_large_2024]](images/heseltine2024.png)
:::

::::

# Zero-shot classification: Umsetzung mit der OpenAI-API

## Zero-shot classification: OpenAI-API

- Beispiel: Klassifikation von Inzivilit√§t in Social-Media-Kommentaren

. . . 

- Klassifikation mit [OpenAI GPT-4o](https://openai.com/gpt-4o) und `httr2`

- Nachmachen: üëâ `bsp_zero_shot_openai.R` (mit OpenAI-Account)

### Genutzte Pakete

```{r}
library(httr2) # Kommunikation mit API √ºber HTTP
library(jsonlite) # JSON-Dateien
library(tidyverse) # Datenmanipulation und Grafik
```

## Erkennen von Inzivilit√§t in Social-Media-Kommentaren [@stoll_developing_2023]

Kommentar mit mindestens einer der folgenden Eigenschaften gilt als inzivil:

:::: {.columns}

::: {.column width="50%"}
- Vulg√§re, unangemessene Sprache, Fluchen
- Beleidigung, Profanit√§t
- Entmenschlichung 
- Sarkasmus, Spott, Zynismus
- Negative Stereotype
:::

::: {.column width="50%"}
- Diskriminierung
- Androhung von Gewalt
- Verweigerung von Rechten
- Vorwurf der L√ºge
- Erniedrigung, fehlender Respekt, Abwertung
:::
::::

## Untersuchungsmaterial

Wir brauchen ein paar Kommentare zum Testen:

- Einen klar inzivilen Kommentar

- Einen klar nicht inzivilen Kommentar

- Zwei mehrdeutige Kommentare:

    - Einen *nicht* inzivilen Kommentar, der f√§lschlicherweise als inzivil klassifiziert wird
    - Einen inzivilen Kommentar, der f√§lschlicherweise als *nicht* inzivil klassifiziert wird


## URL f√ºr Anfrage


```{r}
req = request(base_url = "https://api.openai.com/v1/chat/completions")
req |> 
  req_dry_run()
```


## Key zur Anmeldung bei OpenAI

::: {.callout-important}
Schl√ºssel und Token niemals √∂ffentlich teilen!
:::

```{r}
key = readLines("openai_key.txt")

req |> 
  req_auth_bearer_token(key) |> 
  req_dry_run()
```

## Prompt (1)

### Codieranweisung: Was soll KI-Assistent tun?
```{r}
instr = paste(readLines("codieranweisung.txt"), collapse = "\n")
cat(instr)
```

[@tornberg_best_2024]

## Prompt (2)

### Kategoriensystem: Wie soll die Antwort aussehen?
```{r}
#| output-location: column
response_format = list(
  type = "json_schema",
  json_schema = list(
    name = "social_media_incivility",
    schema = list(
      type = "object",
      properties = list(
        reasoning = list(
          description = "Short text to explain your reasoning",
          type = "string"
        ),
        classification = list(
          description = "Classification into incivil or civil",
          type = "string",
          enum = c("incivil", "civil")
        )
      ),
      additionalProperties = FALSE,
      required = c("reasoning", "classification")
    )
  )
)
response_format |> 
  toJSON() |> 
  prettify()
```


## Prompt (3)

### Codiereinheiten: Was soll klassifiziert werden?
```{r}
cod = readLines("comments.txt")
cat(cod, sep = "\n")
```

## Anfrage

```{r}
req |> 
  req_auth_bearer_token(key) |> 
  req_body_json(list(
    model = "gpt-4o",
    messages = list(
      list(role = "system", content = instr),
      list(role = "user", content = cod[1])
    ),
    response_format = response_format,
    temperature = 0,
    max_completion_tokens = 500
  )) |> 
  req_dry_run()
```

## Antwort

```{r gpt4call}
#| cache: true
#| output-location: column
resp = req |> 
  req_auth_bearer_token(key) |> 
  req_body_json(list(
    model = "gpt-4o",
    messages = list(
      list(role = "system", content = instr),
      list(role = "user", content = cod[1])
    ),
    response_format = response_format,
    temperature = 0,
    max_completion_tokens = 500
  )) |> 
  req_perform()

resp |> 
  resp_body_string() |> 
  prettify()
```

## Alle Kommentare {.scrollable}

```{r gpt4call2}
#| cache: true
#| code-fold: true
# Anfragen f√ºr alle Kommentare ####
req_list = cod |> 
  map(~ {
    req |> 
      req_auth_bearer_token(key) |> 
      req_body_json(list(
        model = "gpt-4o",
        messages = list(
          list(role = "system", content = instr),
          list(role = "user", content = .x)
        ),
        response_format = response_format,
        temperature = 0,
        max_completion_tokens = 500
      )) 
  })

# Antworten f√ºr alle Kommentare ####
resp_list = req_list |> 
  req_perform_parallel()

# Extrahieren und aufbereiten ####
tibble(Kommentar = cod) |> 
  bind_cols(
    resp_list |> 
      map_dfr( ~ {
        .x |> 
          resp_body_json() |> 
          _$choices |> 
          _[[1]] |> 
          _$message |> 
          _$content |> 
          fromJSON() |> 
          as_tibble()
      })
  ) |> 
  knitr::kable()
```

## Zero-shot classification

- Generative LLMs und Natural language inference (NLI) [@laurer_less_2023]

- Rasant entwickelndes Forschungsfeld:

    - Verbesserungen durch weiterentwickelte Modelle
    - Evaluation der Performance: Was geht, was (noch) nicht?
    - Prompt engineering: Welche Codieranweisungen sind besser?
    - Forschungethische Fragen: Biases, Reproduzierbarkeit, Abg√§ngigkeit von propriet√§ren Modellen

- Selbst ausprobieren - es ist nicht so schwer, wie es am Anfang aussieht.

# Fragen?

# Vielen Dank

Marko Bachl

[marko.bachl\@fu-berlin.de](mailto:marko.bachl@fu-berlin.de){.email}

## Literatur {.smaller .scrollable}
